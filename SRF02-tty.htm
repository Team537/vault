<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<title>SRF02 Ultra sonic range finder</title>
</head>
<body>

<p align="center"><b><font size="5">SRF02 Ultrasonic range finder </font><font size="3"><br>
Technical Specification</font></b></p>

<p align="center"><font size="4"><b>Serial Mode<br>
</b></font>For I2C mode <a href="http://www.robot-electronics.co.uk/htm/srf02techI2C.htm"> click here</a></p>
<p align="left"><b>Serial Communication</b><br>
To use the SRF02 in Serial mode, make sure the Mode pin is connected to 0v
Ground.<br>
Serial data is fixed at 9600 baud 1 start, 2 stop and no parity bits. Serial
data is a TTL level signal - It is NOT RS232. Do not connect the SRF02 to an
RS232 port - you will destroy the module! If you would like to connect the SRF02
to your PC's RS232 port, you must use a MAX232 or similar device. It can also be
used (in I2C mode) with the USBI2C module to make a self powered USB ranger, see
the examples page for details. Many small controllers such as the OOPic, Stamp
BS2p, PicAxe etc. as well as a wide variety of micro-controllers have serial
ports. To communicate with the SRF02, you simply need to send two bytes, the
address of the SRF02 (factory default is 0) and the command. The default shipped address
can be <a href="#Address"> changed by the user</a> to any of 16 addresses 0, 1,
2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, or 15, therefore up to 16 sonar's can be
used.</p>
<p align="left"><b>Connections<br>
</b>The connections to the SRF02 are shown below. The "Mode" pin must be
connected to 0v ground to place the SRF02 in serial mode. The Rx pin is data
into the SRF02 and should be connected to the Tx pin on your controller. The Tx
pin is data out of the SRF02 and should be connected to the Rx pin on your
controller. If you're using multiple SRF02's, you can connect them all up to the
same serial port on your controller. Connect the Tx from your controller to all
the Rx pins on the SRF02's and connect the Rx pin on your controller to all the
Tx pins on the SRF02's. This works because the Tx pins are high impedance (just
a weak pull-up to 5v), except when actually sending data. Just make sure all the
SRF02's are programmed to different addresses.</p>
<table align="center">
<tbody><tr>
<td style="text-align: right; padding-top: 20px; LINE-HEIGHT:35px;" valign="top">
	+5v<br>
	Rx<br>
	Tx<br>
	Mode<br>
	GND
</td>
<td>
<img src="SRF02-tty_files/srf02pin.jpg" border="0">
</td>
</tr>
</tbody></table>
<p align="left"><b>Commands</b><br>
To send a command to the SRF02, you need to send two bytes. The first is the
SRF02's address 0 to 15, (0x00 to 0x0F) and then the actual command itself - see
below. The are three commands to initiate a ranging (80 to 82), to produce the result in inches, centimeters or
microseconds. These three commands don't Tx the result back to your controller.
You should wait 70mS and then use command 94 to get the result of the ranging. Another set of three commands
(83 to 85) do the same, but also transmits the result of the ranging back to
your controller as soon as it is available. Together, these six commands (80 -
85) are called "Real" because they perform a complete ranging. There
is another set of six commands (86 - 91) called "Fake". They are the
same as the "Real" commands except that they do not send the 8-cycle
burst out. These are used where the burst has been transmitted by
another sonar. It is up to you to synchronize the commands to the two sonar's. There is
a command (92) to transmit a burst without doing the ranging.<br>
Command 93 is used to get the firmware revision of the SRF02.<br>
Command 94 gets returns two bytes (high byte first) from the most recent
ranging. Put them together to make a 16-bit result.<br>
Commands 95 and 96 are used by the Autotune algorithms - See the <a href="#Autotune">Autotune</a>
section below for details.</p>
<div align="center">
  <center>
  <table cellspacing="0" cellpadding="0" border="1" bgcolor="#FFFFCC">
    <tbody><tr>
      <td colspan="2" align="center">Command</td>
      <td rowspan="2" align="center">Action</td>
    </tr>
    <tr>
      <td width="100" align="center">Decimal</td>
      <td width="100" align="center">Hex</td>
    </tr>
    <tr>
      <td width="100" align="center">80</td>
      <td width="100" align="center">0x50</td>
      <td align="left"> Real Ranging Mode - Result in inches&nbsp;</td>
    </tr>
    <tr>
      <td width="100" align="center">81</td>
      <td width="100" align="center">0x51</td>
      <td align="left"> Real Ranging Mode - Result in centimeters</td>
    </tr>
    <tr>
      <td width="100" align="center">82</td>
      <td width="100" align="center">0x52</td>
      <td align="left"> Real Ranging Mode - Result in micro-seconds</td>
    </tr>
    <tr>
      <td width="100" align="center">83</td>
      <td width="100" align="center">0x53</td>
      <td align="left"> Real Ranging Mode - Result in inches, automatically Tx
        range back to controller as soon as ranging is complete.</td>
    </tr>
    <tr>
      <td width="100" align="center">84</td>
      <td width="100" align="center">0x54</td>
      <td align="left"> Real Ranging Mode - Result in centimeters, automatically
        Tx range back to controller as soon as ranging is complete.</td>
    </tr>
    <tr>
      <td width="100" align="center">85</td>
      <td width="100" align="center">0x55</td>
      <td align="left"> Real Ranging Mode - Result in micro-seconds,
        automatically Tx range back to controller as soon as ranging is
        complete.</td>
    </tr>
    <tr>
      <td width="100" align="center">&nbsp;</td>
      <td width="100" align="center">&nbsp;</td>
      <td align="left"> &nbsp;</td>
    </tr>
    <tr>
      <td width="100" align="center">86</td>
      <td width="100" align="center">0x56</td>
      <td align="left"> Fake Ranging Mode - Result in inches&nbsp;</td>
    </tr>
    <tr>
      <td width="100" align="center">87</td>
      <td width="100" align="center">0x57</td>
      <td align="left"> Fake Ranging Mode - Result in centimeters</td>
    </tr>
    <tr>
      <td width="100" align="center">88</td>
      <td width="100" align="center">0x58</td>
      <td align="left"> Fake Ranging Mode - Result in micro-seconds</td>
    </tr>
    <tr>
      <td width="100" align="center">89</td>
      <td width="100" align="center">0x59</td>
      <td align="left"> Fake Ranging Mode - Result in inches, automatically Tx
        range back to controller as soon as ranging is complete.</td>
    </tr>
    <tr>
      <td width="100" align="center">90</td>
      <td width="100" align="center">0x5A</td>
      <td align="left"> Fake Ranging Mode - Result in centimeters, automatically
        Tx range back to controller as soon as ranging is complete.</td>
    </tr>
    <tr>
      <td width="100" align="center">91</td>
      <td width="100" align="center">0x5B</td>
      <td align="left"> Fake Ranging Mode - Result in micro-seconds,
        automatically Tx range back to controller as soon as ranging is
        complete.</td>
    </tr>
    <tr>
      <td width="100" align="center">&nbsp;</td>
      <td width="100" align="center">&nbsp;</td>
      <td align="left">&nbsp;</td>
    </tr>
    <tr>
      <td width="100" align="center">92</td>
      <td width="100" align="center">0x5C</td>
      <td align="left">Transmit an 8 cycle 40khz burst - no ranging
        takes place</td>
    </tr>
    <tr>
      <td width="100" align="center">93</td>
      <td width="100" align="center">0x5D</td>
      <td align="left">Get software version - sends a single byte back to the
        controller</td>
    </tr>
    <tr>
      <td width="100" align="center">94</td>
      <td width="100" align="center">0x5E</td>
      <td align="left">Get Range, returns two bytes (high byte first) from the
        most recent ranging.</td>
    </tr>
    <tr>
      <td width="100" align="center">95</td>
      <td width="100" align="center">0x5F</td>
      <td align="left">Get Minimum, returns two bytes (high byte first) of the
        closest range measurable - see Autotune section</td>
    </tr>
    <tr>
      <td width="100" align="center">96</td>
      <td width="100" align="center">0x60</td>
      <td align="left">Force Autotune Restart - same as power-up. You can ignore
        this command.</td>
    </tr>
    <tr>
      <td width="100" align="center">&nbsp;</td>
      <td width="100" align="center">&nbsp;</td>
      <td align="left">&nbsp;</td>
    </tr>
    <tr>
      <td width="100" align="center">160</td>
      <td width="100" align="center">0xA0</td>
      <td align="left">1st in sequence to change I2C address</td>
    </tr>
    <tr>
      <td width="100" align="center">165</td>
      <td width="100" align="center">0xA5</td>
      <td align="left">3rd in sequence to change I2C address</td>
    </tr>
    <tr>
      <td width="100" align="center">170</td>
      <td width="100" align="center">0xAA</td>
      <td align="left">2nd in sequence to change I2C address</td>
    </tr>
  </tbody></table>
  </center>
</div>
<p align="left"><b>LED</b><br>
The red LED is used to flash out a code for the I2C address on power-up (see
below). It also gives a brief flash during the "ping" whilst ranging.</p>
<p align="left"><b><a name="Address"></a>Changing the SRF02 Address</b><br>
To change the address of the SRF02 you must have only one sonar connected.
Write the 3 sequence commands in the correct order followed by the address.
Example; to change the address of a sonar currently at 0 (the default shipped
address) to 5, write the following to address 0; (0xA0, 0xAA, 0xA5, 0x05
). These commands must be sent in the correct sequence to change the I2C
address, additionally, No other command may be issued in the middle of the
sequence. The sequence must be sent as four separate commands to the current
address of the sonar. i.e. 0x00, 0xA0 then 0x00, 0xAA, then 0x00, 0xA5 and
finally 0x00, 0x05. When done, you should label the sonar with its new address, however if you
do forget, just power it up without sending any commands. The SRF02 will flash
its address out on the LED. One long flash followed by a number of shorter
flashes indicating its address. The flashing is terminated immediately on
sending a command the SRF02.</p>
<div align="center">
  <center>
  <table width="45%" cellspacing="0" cellpadding="0" border="1" bgcolor="#FFFFCC">
    <tbody><tr>
      <td colspan="2" width="45%" align="center">Address</td>
      <td rowspan="2" width="25%" align="center">Long Flash</td>
      <td rowspan="2" width="30%" align="center">Short flashes</td>
    </tr>
    <tr>
      <td width="23%" align="center">Decimal</td>
      <td width="22%" align="center">Hex</td>
    </tr>
    <tr>
      <td width="23%" align="center">0</td>
      <td width="22%" align="center">00</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">0</td>
    </tr>
    <tr>
      <td width="23%" align="center">1</td>
      <td width="22%" align="center">01</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">1</td>
    </tr>
    <tr>
      <td width="23%" align="center">2</td>
      <td width="22%" align="center">02</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">2</td>
    </tr>
    <tr>
      <td width="23%" align="center">3</td>
      <td width="22%" align="center">03</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">3</td>
    </tr>
    <tr>
      <td width="23%" align="center">4</td>
      <td width="22%" align="center">04</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">4</td>
    </tr>
    <tr>
      <td width="23%" align="center">5</td>
      <td width="22%" align="center">05</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">5</td>
    </tr>
    <tr>
      <td width="23%" align="center">6</td>
      <td width="22%" align="center">06</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">6</td>
    </tr>
    <tr>
      <td width="23%" align="center">7</td>
      <td width="22%" align="center">07</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">7</td>
    </tr>
    <tr>
      <td width="23%" align="center">8</td>
      <td width="22%" align="center">08</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">8</td>
    </tr>
    <tr>
      <td width="23%" align="center">9</td>
      <td width="22%" align="center">09</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">9</td>
    </tr>
    <tr>
      <td width="23%" align="center">10</td>
      <td width="22%" align="center">0A</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">10</td>
    </tr>
    <tr>
      <td width="23%" align="center">11</td>
      <td width="22%" align="center">0B</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">11</td>
    </tr>
    <tr>
      <td width="23%" align="center">12</td>
      <td width="22%" align="center">0C</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">12</td>
    </tr>
    <tr>
      <td width="23%" align="center">13</td>
      <td width="22%" align="center">0D</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">13</td>
    </tr>
    <tr>
      <td width="23%" align="center">14</td>
      <td width="22%" align="center">0E</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">14</td>
    </tr>
    <tr>
      <td width="23%" align="center">15</td>
      <td width="22%" align="center">0F</td>
      <td width="25%" align="center">1</td>
      <td width="30%" align="center">15</td>
    </tr>
  </tbody></table>
  </center>
</div>
<p align="left">Take care not to set more than one sonar to the same address,
there will be a bus collision and very unpredictable results.</p>
<p align="left">Note - there is only one module address stored in the SRF02. If
you change it, the equivalent I2C address will also change:<br>
<font face="Fixedsys">0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F Serial addresses<br>
0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8,
0xFA, 0xFC, 0xFE Equivalent I2C addresses</font></p>
<p align="left"><b><a name="Autotune"></a>AutoTune</b><br>
The SRF02 does not require any user calibration. You power up and go right ahead
and use the SRF02.<br>
Internally, there are tuning cycles happening automatically in the background.
After the ultrasonic burst has been transmitted, the transducer keeps on ringing
for a period of time. It is this ringing which limits the closest range the
SRF02 can measure. This time period varies with temperature and from transducer
to transducer, but is normally the equivalent of 11 to 16cm (4" to
6"), a bit more if the transducer is warm. The SRF02 is able to detect the
transducer ring time and move its detection threshold right up to it, giving the
SRF02 the very best performance possible. On power up, the detection threshold
is set to 28cm (11"). The tuning algorithms quickly back this right up to
the transducer ring. This happens within 5-6 ranging cycles - less than half a
second at full scan speed. After this the tuning algorithms continue to monitor
the transducer, backing the threshold up even further when possible or easing it
out a bit when necessary. The tuning algorithms work automatically, in the
background and with no impact on scan time.<br>
The minimum range can be checked, if required by sending command 95. This will
return the closest measurable range in uS, cm or inches, the same as the range. It is also
possible to make the SRF02 re-tune by writing command 96 but you can ignore this
command. It is used during our testing.</p>



</body></html>